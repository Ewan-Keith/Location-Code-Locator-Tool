install.packages(DT)
install.packages('DT')
install.packages('shiny')
install.packages('ggplot2')
library(shiny)
library(ggplot2)
library(DT)
library(ggplot2)
?showOutput
4000 - 3876.85
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
shiny::runApp('MoD_Work/Location Codes/Shiny App')
library(DT)
shiny::runApp('MoD_Work/Location Codes/Shiny App')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
shinyapps::setAccountInfo(name='ewan-keith',
token='ED8DDA8FF6D5D44B78E29AD6A4CCD153',
secret='<SECRET>')
shinyapps::setAccountInfo(name='ewan-keith', token='ED8DDA8FF6D5D44B78E29AD6A4CCD153', secret='OY3wukX1iCNfyTFCptF2o6UREm3oFF515FuFCdnj')
deployApp()
setwd("~/MoD_Work/Location Codes/Location Code Locator Tool")
deployApp()
shinyapps::setAccountInfo(name='ewan-keith', token='ED8DDA8FF6D5D44B78E29AD6A4CCD153', secret='OY3wukX1iCNfyTFCptF2o6UREm3oFF515FuFCdnj')
deployApp()
deployApp(appName="Location Code Locator Tool")
deployApp(appName="Location_Code_Locator_Tool")
?addLegend
shiny::runApp()
deployApp(appName="Location_Code_Locator_Tool")
shiny::runApp()
library(ShinyDash)
shiny::runApp()
shiny::runApp()
setwd("~/MoD_Work/Location Codes/region test")
library(ggmap)
library(leaflet)
library(rgdal)
library(spatialEco)
test <- readOGR(dsn = ".", 'Regions')
plot(test)
str(test)
test@data
setwd("~/MoD_Work/Location Codes")
locations <- read.csv('location codes.csv', stringsAsFactors = FALSE)
eng_regions <- read.csv('locations with constituencies.csv')
str(eng_regions)
test <- readOGR(dsn = "England Regions", 'Regions')
plot(test)
eng_shape <- readOGR(dsn = "England Regions", 'Regions')
str(eng_regions)
regions_sp <- eng_regions[complete.cases(eng_regions),2:5]
bng <- '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
wgs84 <- '+proj=longlat +datum=WGS84'
coordinates(regions_sp) <- ~lon+lat
regions_sp@proj4string <- CRS(wgs84)
regions_bng <- spTransform(regions_sp, CRS(bng))
eng_regions_bng <- spTransform(eng_regions, CRS(bng))
plot(regions_sp)
plot(eng_shape)
england_regions_final <- over(regions_bng, eng_shape)
plot(regions_sp)
eng_regions@proj4string <- CRS(bng)
eng_shape@proj4string <- CRS(bng)
england_regions_final <- over(regions_bng, eng_shape)
str(england_regions_final)
summary(england_regions_final)
summary(england_regions_final$NAME)
head(england_regions_final$NAME)
tail(england_regions_final$NAME)
england_regions_final$NAME[1:100]
region_name <- england_regions_final$NAME
summary(region_name)
str(region_name)
length(region_name)
eng_region_final <- eng_regions[complete.cases(eng_regions),]
eng_region_final <- cbind(eng_region_final, region_name)
str(eng_region_final)
write.csv(eng_region_final, "locations with english regions.csv")
setwd("~/MoD_Work/Location Codes/Bdlines/Data/Scotland")
test <- readOGR(dsn=".", "scotland_and_wales_region_region")
plot(test)
setwd("~/MoD_Work/Location Codes/Bdlines/Data/GB")
test <- readOGR(dsn=".", "scotland_and_wales_region_region")
plot(test)
str(test)
str(test@data)
str(test$FILE_NAME)
summary(test$FILE_NAME)
summary(test$AREA_CODE)
test <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
setwd("~/MoD_Work/Location Codes/Location Code Locator Tool")
test <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
setwd("~/MoD_Work/Location Codes")
test <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
plot(test)
scot_shape <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
scot_regions <- read.csv("locations with english regions.csv")
str(scot_regions)
regions_sp <- scot_regions[complete.cases(eng_regions),2:5]
coordinates(regions_sp) <- ~lon+lat
regions_sp <- scot_regions[complete.cases(scot_regions),2:5]
# set points as sp file and set long-lat reference prjection
coordinates(regions_sp) <- ~lon+lat
regions_sp@proj4string <- CRS(wgs84)
regions_bng <- spTransform(regions_sp, CRS(bng))
scot_shape@proj4string <- CRS(bng)
regions_bng <- spTransform(regions_sp, CRS(bng))
scot_shape@proj4string <- CRS(bng)
scot_regions_final <- over(regions_bng, scot_shape)
str(scot_regions_final)
scot_regions <- read.csv("locations with english regions.csv")
str(scot_regions)
scot_shape <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
bng <- '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
wgs84 <- '+proj=longlat +datum=WGS84'
#remove missing location
regions_sp <- scot_regions[complete.cases(scot_regions),2:5]
summary(scot_regions)
str(regions_sp)
summary(regions_sp)
regions_sp <- scot_regions[complete.cases(scot_regions[,2:5]),2:5]
summary(regions_sp)
str(scot_regions)
scot_regions <- read.csv("locations with english regions.csv")
scot_regions <- scot_regions[,-7]
scot_shape <- readOGR(dsn="Bdlines/Data/GB", "scotland_and_wales_region_region")
# set relevant projections
bng <- '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
wgs84 <- '+proj=longlat +datum=WGS84'
#remove missing location
regions_sp <- scot_regions[complete.cases(scot_regions[,2:5]),2:5]
regions_sp <- scot_regions[complete.cases(scot_regions),2:5]
eng_regions <- read.csv('locations with constituencies.csv')
regions_sp <- eng_regions[complete.cases(eng_regions),2:5]
scot_regions <- read.csv("locations with english regions.csv")
scot_regions <- scot_regions[,-7]
regions_sp <- scot_regions[complete.cases(scot_regions),2:5]
# set points as sp file and set long-lat reference prjection
coordinates(regions_sp) <- ~lon+lat
regions_sp@proj4string <- CRS(wgs84)
# convert both points and borders into commmon projection
regions_bng <- spTransform(regions_sp, CRS(bng))
scot_shape@proj4string <- CRS(bng)
scot_regions_final <- over(regions_bng, scot_shape)
str(scot_regions_final)
str(scot_regions_final$AREA_CODE)
summary(scot_regions_final$AREA_CODE)
557+267
str(england_regions_final)
summary(england_regions_final$NAME)
824+130+202+264+108+224+279+238+127+162
scots_region_name <- scot_regions_final$AREA_CODE
write.csv(scots_region_name, "Vector of Scotland and Wales.csv")
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
if(input$cluster == FALSE){
cluster_check <- NULL
} else{
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
?else
?if
?if()
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
shiny::runApp('Location Code Locator Tool')
setwd("~/MoD_Work/Location Codes/Location Code Locator Tool")
location_data <- read.csv("locations with GORS regions.csv")
location_data <- location_data[complete.cases(location_data),]
str(location_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='ewan-keith', token='ED8DDA8FF6D5D44B78E29AD6A4CCD153', secret='OY3wukX1iCNfyTFCptF2o6UREm3oFF515FuFCdnj')
library(rsconnect)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(location_data)
head(location_data)
head(location_data$region_name)
head(levels(location_data$region_name))
head(as.character(location_data$region_name))
shiny::runApp()
location_data[as.character(location_data$region_name) == "Wales",]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
location_data <- read.csv("locations with GORS regions.csv")
location_data <- location_data[complete.cases(location_data),]
str(location_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinystan")
library(shinystan)
launch_shinystan_demo(rstudio = getOption("shinystan.rstudio"))
launch_shinystan_demo()
launch_shinystan_demo(rstudio = getOption("shinystan.rstudio"), ...)
launch_shinystan_demo(rstudio = getOption("shinystan.rstudio"), )
launch_shinystan_demo(rstudio = getOption("shinystan.rstudio") )
shiny::runApp()
library(rsconnect)
shinyapps::setAccountInfo(name='ewan-keith', token='ED8DDA8FF6D5D44B78E29AD6A4CCD153', secret='OY3wukX1iCNfyTFCptF2o6UREm3oFF515FuFCdnj')
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# The inclusion of both DT and Rcharts does something funny by installing Jquery multiple times. The links to jquery, apart from the first, must be removed manually from the html for full functionality
